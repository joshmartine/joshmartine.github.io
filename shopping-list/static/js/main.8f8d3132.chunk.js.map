{"version":3,"sources":["components/AppNavbar.js","components/ShoppingList.js","actions/itemActions.js","actions/types.js","components/ItemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","ShoppingList","onDeleteClick","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","type","payload","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","uuid","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","initialState","combineReducers","action","filter","middleware","thunk","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f8d3132.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Container\n} from 'reactstrap';\n\nclass AppNavbar extends Component {\n  state = {\n    isOpen: false\n  };\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\n          <Container>\n            <NavbarBrand href=\"/\">ShoppingList</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink href=\"https://github.com/joshmartine\">\n                    Github\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default AppNavbar;\n","import React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { getItems, deleteItem } from '../actions/itemActions';\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n  componentDidMount() {\n    this.props.getItems();\n  }\n\n  onDeleteClick = id => {\n    this.props.deleteItem(id);\n  };\n\n  render() {\n    const { items } = this.props.item;\n    return (\n      <Container>\n        <ListGroup>\n          <TransitionGroup className=\"shopping-list\">\n            {items.map(({ id, name }) => (\n              <CSSTransition key={id} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                  <Button\n                    className=\"remove-btn\"\n                    color=\"danger\"\n                    size=\"sm\"\n                    onClick={this.onDeleteClick.bind(this, id)}\n                  >\n                    &times;\n                  </Button>\n                  {name}\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        </ListGroup>\n      </Container>\n    );\n  }\n}\n\nShoppingList.propTypes = {\n  getItems: PropTypes.func.isRequired,\n  item: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  item: state.item\n});\n\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList);\n","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM } from './types';\n\nexport const getItems = () => {\n  return {\n    type: GET_ITEMS\n  };\n};\n\nexport const deleteItem = id => {\n  return {\n    type: DELETE_ITEM,\n    payload: id\n  };\n};\n\nexport const addItem = item => {\n  return {\n    type: ADD_ITEM,\n    payload: item\n  };\n};\n","export const GET_ITEMS = 'GET_ITEMS';\nexport const ADD_ITEM = 'ADD_ITEM';\nexport const DELETE_ITEM = 'DELETE_ITEM';\n","import React, { Component } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions';\nimport uuid from 'uuid';\n\nclass ItemModal extends Component {\n  state = {\n    modal: false,\n    name: ''\n  };\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  onChange = e => {\n    this.setState({\n      [e.target.name]: [e.target.value]\n    });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    // Get id from uuid since we aren't hooked up to backend\n    const newItem = {\n      id: uuid(),\n      name: this.state.name\n    };\n\n    // Add item via addItem action\n    this.props.addItem(newItem);\n\n    // Close modal\n    this.toggle();\n  };\n\n  render() {\n    return (\n      <div>\n        <Button\n          color=\"dark\"\n          style={{ marginBottom: '2rem' }}\n          onClick={this.toggle}\n        >\n          Add Item\n        </Button>\n\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\n          <ModalHeader toggle={this.toggle}>Add To Shopping List</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"item\">Item</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"item\"\n                  placeholder=\"Add shopping item\"\n                  onChange={this.onChange}\n                />\n                <Button color=\"dark\" style={{ marginTop: '2rem' }} block>\n                  Add Item\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  item: state.item\n});\n\nexport default connect(mapStateToProps, { addItem })(ItemModal);\n","import uuid from 'uuid';\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM } from '../actions/types';\n\nconst initialState = {\n  items: [\n    { id: uuid(), name: 'Eggs' },\n    { id: uuid(), name: 'Milk' },\n    { id: uuid(), name: 'Steak' },\n    { id: uuid(), name: 'Candy' }\n  ]\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ITEMS:\n      return {\n        ...state\n      };\n    case DELETE_ITEM:\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== action.payload)\n      };\n    case ADD_ITEM:\n      return {\n        ...state,\n        items: [action.payload, ...state.items]\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport itemReducer from './itemReducer';\n\nexport default combineReducers({\n  item: itemReducer\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeEnhancer(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport ItemModal from './components/ItemModal';\nimport { Container } from 'reactstrap';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}